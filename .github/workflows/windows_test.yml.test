name: Windows-test

env:
  branch-name: '92-create-github-runner'

on:
  push:
    branches:
      - 92-create-github-runner
  pull_request:
    branches:
     - 92-create-github-runner

jobs:
  prepare-version:
    #runs-on: [self-hosted, Linux]
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      versionCode: ${{ steps.version.outputs.versionCode }}
      minor-version: ${{ steps.version.outputs.minor-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Show version.txt content
        run: cat version.txt
      - name: Read Version
        id: version
        run: |
          awk -F'.' '{print $1 "." ($2 + 1) "." $3}' version.txt > temp_version.txt && mv temp_version.txt version.txt
          MAJOR=$(awk -F'.' '{print $1}' version.txt)
          MINOR=$(awk -F'.' '{print $2}' version.txt)
          PATCH=$(awk -F'.' '{print $3}' version.txt)
          VERSION_CODE=$MAJOR
          echo "::set-output name=new-version::$MAJOR.$MINOR.$PATCH"
          echo "::set-output name=versionCode::$VERSION_CODE"
          echo "::set-output name=minor-version::$MINOR"
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          echo "Version Code: $VERSION_CODE"
      - name: Commit and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "Update version to $MAJOR.$MINOR.$PATCH"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TOKEN }}
          branch: ${{ env.branch-name }}

  build:
    runs-on: [self-hosted, Windows]
    needs: prepare-version
    steps:
      - uses: actions/checkout@v2
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'
      - name: Debug Output Values
        run: |
          echo "New Version: ${{ needs.prepare-version.outputs.new-version }}"
          echo "Version Code: ${{ needs.prepare-version.outputs.versionCode }}"
      - name: Install Certificate with Admin Privileges
        run: |
          Start-Process powershell -ArgumentList "Import-PfxCertificate -FilePath KoOrderRegister\Technical\kor.pfx -CertStoreLocation Cert:\LocalMachine\My -Password (ConvertTo-SecureString -String kor -Force -AsPlainText)" -Verb RunAs
        shell: powershell
      - name: Install .NET MAUI Android workloads
        run: dotnet workload install maui-android
      - name: Install .NET SDK maui
        run: dotnet workload install maui
      - name: Run build script
        run: cmd /c ".\build.bat"
        env:
          KEYPASS: ${{ secrets.KEYPASS }}
          NEW_VERSION: ${{ needs.prepare-version.outputs.new-version }}
          NEW_VERSION_CODE: ${{ needs.prepare-version.outputs.versionCode }}
      - name: Install GitHub CLI
        run: |
          $cliUri = "https://github.com/cli/cli/releases/download/v2.57.0/gh_2.57.0_windows_amd64.msi"
          $cliPath = "$env:TEMP\gh_2.57.0_windows_amd64.msi"
          Invoke-WebRequest -Uri $cliUri -OutFile $cliPath
          Start-Process msiexec.exe -Wait -ArgumentList "/i $cliPath /quiet"
          $ghPath = "C:\Program Files\GitHub CLI"
          Write-Output "PATH=$ghPath;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          files: output/*.apk,output/*.msix
          tag_name: ${{ needs.prepare-version.outputs.versionCode }}.${{ needs.prepare-version.outputs.minor-version }}
          release_name: ${{ needs.prepare-version.outputs.new-version }}
          body_path: Technical/release_base.md
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
		  
		  
		  
		  
		  
		   build:
    runs-on: [self-hosted, Windows]
    needs: prepare-version
    steps:
      - uses: actions/checkout@v2
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'
      - name: Debug Output Values
        run: |
          echo "New Version: ${{ needs.prepare-version.outputs.new-version }}"
          echo "Version Code: ${{ needs.prepare-version.outputs.versionCode }}"
      - name: Install Certificate with Admin Privileges
        run: |
          Start-Process powershell -ArgumentList "Import-PfxCertificate -FilePath KoOrderRegister\Technical\kor.pfx -CertStoreLocation Cert:\LocalMachine\My -Password (ConvertTo-SecureString -String kor -Force -AsPlainText)" -Verb RunAs
        shell: powershell
      - name: Install .NET MAUI Android workloads
        run: dotnet workload install maui-android
      - name: Install .NET SDK maui
        run: dotnet workload install maui
      - name: Run build script
        run: cmd /c ".\build.bat"
        env:
          KEYPASS: ${{ secrets.KEYPASS }}
          NEW_VERSION: ${{ needs.prepare-version.outputs.new-version }}
          NEW_VERSION_CODE: ${{ needs.prepare-version.outputs.versionCode }}
      - name: Install GitHub CLI
        run: |
          $cliUri = "https://github.com/cli/cli/releases/download/v2.57.0/gh_2.57.0_windows_amd64.msi"
          $cliPath = "$env:TEMP\gh_2.57.0_windows_amd64.msi"
          Invoke-WebRequest -Uri $cliUri -OutFile $cliPath
          Start-Process msiexec.exe -Wait -ArgumentList "/i $cliPath /quiet"
          $ghPath = "C:\Program Files\GitHub CLI"
          Write-Output "PATH=$ghPath;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          files: output/*.apk,output/*.msix
          tag_name: ${{ needs.prepare-version.outputs.versionCode }}.${{ needs.prepare-version.outputs.minor-version }}
          release_name: ${{ needs.prepare-version.outputs.new-version }}
          body_path: Technical/release_base.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
