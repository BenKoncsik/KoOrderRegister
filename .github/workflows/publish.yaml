name: Publish

env:
  branch-name: 'main'

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
permissions:
  contents: write
  pull-requests: write


jobs:
  prepare-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      versionCode: ${{ steps.version.outputs.versionCode }}
      minor-version: ${{ steps.version.outputs.minor-version }}
    steps:
      - name: Get the current MINOR version using GitHub CLI
        id: get-minor-version
        run: |
          MINOR=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/variables/MINOR \
            --jq '.value')
          echo "Current MINOR version: $MINOR"
          echo "MINOR=$MINOR" >> $GITHUB_ENV

      - name: Increment the MINOR version
        id: increment-minor
        run: |
          NEW_MINOR=$((MINOR + 1))
          echo "New MINOR version: $NEW_MINOR"
          echo "new-minor=$NEW_MINOR" >> $GITHUB_ENV

      - name: Update the MINOR version using GitHub CLI
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/variables/MINOR \
            -f "name=MINOR" -f "value=$NEW_MINOR"

      - name: Set outputs for the new version
        id: version
        run: |
          MAJOR=1 # Assuming a fixed value for MAJOR version
          NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          VERSION_CODE="$MAJOR"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "versionCode=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "minor-version=$NEW_MINOR" >> $GITHUB_OUTPUT
             
        
  build:
    runs-on: [self-hosted, Windows]
    needs: prepare-version
    steps:
      - uses: actions/checkout@v2
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'
      - name: Debug Output Values
        run: |
          echo "New Version: ${{ needs.prepare-version.outputs.new-version }}"
          echo "Version Code: ${{ needs.prepare-version.outputs.versionCode }}"
      - name: Install Certificate with Admin Privileges
        run: |
          Start-Process powershell -ArgumentList "Import-PfxCertificate -FilePath KoOrderRegister\Technical\kor.pfx -CertStoreLocation Cert:\LocalMachine\My -Password (ConvertTo-SecureString -String kor -Force -AsPlainText)" -Verb RunAs
        shell: powershell
      - name: Install .NET MAUI Android workloads
        run: dotnet workload install maui-android
      - name: Install .NET SDK maui
        run: dotnet workload install maui
      - name: Run build script
        run: cmd /c ".\build.bat"
        env:
          KEYPASS: ${{ secrets.KEYPASS }}
          NEW_VERSION: ${{ needs.prepare-version.outputs.new-version }}
          NEW_VERSION_CODE: ${{ needs.prepare-version.outputs.versionCode }}
      - name: Install GitHub CLI
        run: |
          $cliUri = "https://github.com/cli/cli/releases/download/v2.57.0/gh_2.57.0_windows_amd64.msi"
          $cliPath = "$env:TEMP\gh_2.57.0_windows_amd64.msi"
          Invoke-WebRequest -Uri $cliUri -OutFile $cliPath
          Start-Process msiexec.exe -Wait -ArgumentList "/i $cliPath /quiet"
          $ghPath = "C:\Program Files\GitHub CLI"
          Write-Output "PATH=$ghPath;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          files: output/*.apk,output/*.msix,KoOrderRegister/Technical/kor.pfx
          tag_name: ${{ needs.prepare-version.outputs.versionCode }}.${{ needs.prepare-version.outputs.minor-version }}
          release_name: ${{ needs.prepare-version.outputs.new-version }}
          body_path: Technical/release_base.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}


 


 
