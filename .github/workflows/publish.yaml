name: Publish

env:
  branch-name: 'main'

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  prepare-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      versionCode: ${{ steps.version.outputs.versionCode }}
      minor-version: ${{ steps.version.outputs.minor-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Show version.txt content
        run: cat version.txt

      - name: Read Version
        id: version
        run: |
          awk -F'.' '{print $1 "." ($2 + 1) "." $3}' version.txt > temp_version.txt && mv temp_version.txt version.txt
          MAJOR=$(awk -F'.' '{print $1}' version.txt)
          MINOR=$(awk -F'.' '{print $2}' version.txt)
          PATCH=$(awk -F'.' '{print $3}' version.txt)
          VERSION_CODE=$MAJOR

          # Set outputs using $GITHUB_OUTPUT
          echo "new-version=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
          echo "versionCode=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "minor-version=$MINOR" >> $GITHUB_OUTPUT

          # Export variables to $GITHUB_ENV for use in later steps
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

          echo "Current version: $MAJOR.$MINOR.$PATCH"
          echo "Version Code: $VERSION_CODE"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create and switch to new branch
        run: |
          BRANCH_NAME="version-update/${{ env.MAJOR }}-${{ env.MINOR }}-${{ env.PATCH }}-$(date +%s)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"
       
      - name: Write Version
        id: versionwrite
        run: |
          awk -F'.' '{print $1 "." ($2 + 1) "." $3}' version.txt > temp_version.txt && mv temp_version.txt version.txt
          MAJOR=$(awk -F'.' '{print $1}' version.txt)
          MINOR=$(awk -F'.' '{print $2}' version.txt)
          PATCH=$(awk -F'.' '{print $3}' version.txt)
          VERSION_CODE=$MAJOR
        
      - name: Commit changes
        run: |
          git add version.txt
          git commit -m "Update version to ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}"

      - name: Push new branch to repository
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          force: true 
      
      - name: Update git remote references
        run: git remote update

      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update version to ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}"
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: "Update version to ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}"
          body: "This pull request updates the version to ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}."

      - name: Auto-merge pull request
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branchName = '${{ env.BRANCH_NAME }}';

            const { data: pullRequests } = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              state: 'open',
              head: `${owner}:${branchName}`,
            });

            if (pullRequests.length > 0) {
              const prNumber = pullRequests[0].number;

              await github.rest.pulls.merge({
                owner: owner,
                repo: repo,
                pull_number: prNumber,
                merge_method: 'squash',
              });

              console.log(`Pull request #${prNumber} has been merged.`);
            } else {
              console.log(`No pull request found for branch ${branchName}`);
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}


 


 
